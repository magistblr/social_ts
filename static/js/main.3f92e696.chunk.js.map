{"version":3,"sources":["components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Dialogs/NewMessage/NewMessage.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/Message/FriendMessage.module.css","components/Sidebar/Sidebar.module.css","components/Profile/Profile.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Dialogs.module.css","components/Sidebar/Navbar/Navbar.module.css","components/Sidebar/Friends/Friends.module.css","components/Header/Header.module.css","components/Login/Login.module.css","components/Spinner/Spinner.module.css","api/api.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/auth-redux.ts","components/Sidebar/Navbar/Navbar.tsx","components/Sidebar/Friends/Friends.tsx","components/Sidebar/Sidebar.tsx","components/Sidebar/SidebarContainer.tsx","redux/usersReducer.ts","assets/img/users.png","components/Users/Users.tsx","components/Spinner/Spinner.tsx","components/Users/UsersContainer.tsx","redux/profileReducer.ts","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/hoc/withAuthRedirect.tsx","components/Profile/ProfileContainer.tsx","assets/img/soc_logo.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","redux/dialogsReducer.ts","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/FriendMessage.tsx","components/Dialogs/NewMessage/NewMessage.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","App.tsx","redux/sidebarReducer.ts","redux/friendsReducer.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","ResultCodesEnum","News","Music","Settings","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","remember","res","SET_USER_DATA","initialState","users","login","isAuth","setAuthUserData","type","getAuthUserData","dispatch","log","resultCode","id","authReducer","state","action","Navbar","props","className","s","list","list_item","to","url","name","Friends","friends_avatar","friends_name","Sidebar","navElements","navbar","map","items","friendsElements","friends","wrapper","friends_label","friends_items","withUrlDataContainerComponent","withRouter","useEffect","connect","sidebarPage","friendsBar","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","toggleFollowingProgress","Users","pages","i","push","pagination","p","pagination_wrapper","onClick","onPageChanged","pagination_item_selected","u","logo","src","photos","small","userPhoto","alt","followed","disabled","some","unfollow","follow","descr_wrapper_outer","descr_wrapper_inner","descr","descr_status","location","location_country","location_city","Spinner","lds_roller","UsersContainer","pageNumber","getUsers","this","React","Component","WithUrlDataContainerComponent","usersPage","followSuccess","unfollowSuccess","setCurrentPages","setUsers","totalCount","count","ADD_POST","ON_POST_CHANGE","SET_USER_PROFILE","SET_STATUS","posts","v1","message","newPostText","profile","lookingForAJob","lookingForAJobDescription","fullName","aboutMe","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","large","onPostChangeTextActionCreator","text","newText","setStatus","profileReducer","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","status_wrapper","status_span","onDoubleClick","status_input","onChange","autoFocus","onBlur","ProfileInfo","user","user_img","user_name","user_description_list","Post","avatar","avatar_img","message_wrapper","MyPosts","postsElements","profilePage","new_post","new_post_textarea","onPostChangeText","placeholder","posts_btn","btn_button","addPost","MyPostsContainer","addPostActionCreator","Profile","content_img","content","mapStateToPropsForRedirect","auth","withAuthRedirect","restProps","ProfileContainer","match","params","getUserProfile","getUserStatus","compose","Header","onLogout","header","header_img","logout","useState","Success","LoginForm","useForm","register","handleSubmit","onSubmit","Login","rememberMe","useDispatch","useSelector","NEW_MESSAGE","SEND_MESSAGE","dialogs","messages","friendMessages","newMessageBody","updateMessageCreator","dialogsReducer","Message","users_wrapper","dialogs_users_message","dialogs_users","DialogItem","path","item","item_mark","item_name","FriendMessage","wrapper_friend","friend","friend_img","message_friend","NewMessage","onSendMessageClick","onNewMessageChange","dialogsPage","new_message_wrapper","new_message","new_message_btn","body","dialogsElements","d","messagesElements","m","friendMessagesElements","f","dialogs_wrapper","label","App","render","DialogsContainer","sidebarReducer","friendsReducer","rootReducer","combineReducers","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3f92e696.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3nngw\",\"logo\":\"Users_logo__QHSjf\",\"descr_wrapper_outer\":\"Users_descr_wrapper_outer__2Whhg\",\"descr_wrapper_inner\":\"Users_descr_wrapper_inner__2XT0f\",\"descr\":\"Users_descr__1Rj5K\",\"descr_status\":\"Users_descr_status__24AxJ\",\"location\":\"Users_location__1jpYC\",\"location_city\":\"Users_location_city__2Do-m\",\"pagination\":\"Users_pagination__2fKqc\",\"pagination_wrapper\":\"Users_pagination_wrapper__2-vfX\",\"pagination_item_selected\":\"Users_pagination_item_selected__3mJJz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"ProfileInfo_user__2TDrZ\",\"user_img\":\"ProfileInfo_user_img__2xBB2\",\"user_name\":\"ProfileInfo_user_name__xNmFt\",\"user_description_list\":\"ProfileInfo_user_description_list__3BH0i\",\"status_wrapper\":\"ProfileInfo_status_wrapper__1N2II\",\"status_input\":\"ProfileInfo_status_input__3HHYS\",\"status_span\":\"ProfileInfo_status_span__1ntix\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__9Y59T\",\"post\":\"MyPosts_post__2wS-p\",\"new_post\":\"MyPosts_new_post__C3IhM\",\"new_post_textarea\":\"MyPosts_new_post_textarea__qfhTp\",\"posts_btn\":\"MyPosts_posts_btn__29dr_\",\"btn_button\":\"MyPosts_btn_button__2QB03\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"new_message_wrapper\":\"NewMessage_new_message_wrapper__1CmWe\",\"new_message\":\"NewMessage_new_message__1eWPh\",\"new_message_btn\":\"NewMessage_new_message_btn__2osm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Post_wrapper__3KSP_\",\"avatar\":\"Post_avatar__2f4zC\",\"avatar_img\":\"Post_avatar_img__2IHO-\",\"message_wrapper\":\"Post_message_wrapper__96s_b\",\"messages_message\":\"Post_messages_message__2R41_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_friend\":\"FriendMessage_wrapper_friend__1O19g\",\"friend\":\"FriendMessage_friend__3gZAn\",\"friend_img\":\"FriendMessage_friend_img__3ASaE\",\"message_friend\":\"FriendMessage_message_friend__1oaFm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sidebar_wrapper__13cMU\",\"friends_label\":\"Sidebar_friends_label__1yany\",\"friends_items\":\"Sidebar_friends_items__1aNcY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__3ysYR\",\"content_img\":\"Profile_content_img__84EmG\",\"content\":\"Profile_content__1CSvy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_wrapper\":\"Message_users_wrapper__Nvix9\",\"dialogs_users\":\"Message_dialogs_users__kukkg\",\"dialogs_users_message\":\"Message_dialogs_users_message__2zvZD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DialogItem_item__n7hXj\",\"item_mark\":\"DialogItem_item_mark__2g0FK\",\"item_name\":\"DialogItem_item_name__3Umts\",\"item-name\":\"DialogItem_item-name__2MUBs\",\"active\":\"DialogItem_active__2Ny-Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs_wrapper\":\"Dialogs_dialogs_wrapper__1FMMd\",\"items\":\"Dialogs_items__FbC7O\",\"label\":\"Dialogs_label__QPpqT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Navbar_list__zuUDk\",\"list_item\":\"Navbar_list_item__2S3w8\",\"active\":\"Navbar_active__36ZXq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_avatar\":\"Friends_friends_avatar__CAp_D\",\"friends_name\":\"Friends_friends_name__37GVk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2ylUg\",\"header_img\":\"Header_header_img__1dAnZ\",\"header_login\":\"Header_header_login__MUUDF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__2ubgL\",\"login\":\"Login_login__20bJU\",\"form\":\"Login_form__avJwU\",\"input\":\"Login_input__KYclF\",\"error_input\":\"Login_error_input__3a6Cu\",\"btn\":\"Login_btn__aUYA2\",\"error\":\"Login_error__1E4SK\",\"remember\":\"Login_remember__sEXi4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_roller\":\"Spinner_lds_roller__3twnJ\"};","import { Users, UsersType } from './../components/Users/Users';\r\nimport axios from \"axios\";\r\nimport { UserType } from \"../redux/usersReducer\";\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',    //автоматом приклеивается к адресу в запросе(важно писать URL с большой буквы)\r\n  headers: {\r\n    \"API-KEY\": \"e7622b7e-10ee-4bb5-a04b-02e3e2e0b25a\"\r\n  }\r\n})\r\n\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1\r\n}\r\n\r\ntype ResponseType<D ={}, RC = ResultCodesEnum> = {\r\n  data: D\r\n  message: string[]\r\n  resultCode: RC\r\n}\r\n\r\ntype MeResponseDataType = {\r\n  id: string\r\n  email: string\r\n  login: string\r\n  isAuth: boolean\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n  userId: number\r\n}\r\n\r\nexport type DataType = {\r\n  error: null\r\n  items: UserType[]\r\n  totalCount: number\r\n}\r\n\r\nexport type AuthDataType = {\r\n  data: MeResponseDataType\r\n  resultCode: number\r\n  messages: [] | string\r\n}\r\nexport type LoginType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: boolean\r\n}\r\n\r\n\r\n\r\nexport const userAPI = {\r\n  getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n    return instance.get<DataType>(`users?page=${currentPage}&count=${pageSize}`)       //запрос\r\n      .then(response => {\r\n        return response.data;\r\n      });\r\n  },\r\n  follow(userId: number) {\r\n    return instance.post(`follow/${userId}`)       //запрос\r\n  },\r\n\r\n  unfollow(userId: number) {\r\n    return instance.delete(`follow/${userId}`)       //запрос\r\n  },\r\n  getProfile(userId: string) {\r\n    console.warn('Obsolete method. Please use \"profileAPI\" object.');\r\n    return profileAPI.getProfile(userId)\r\n  }\r\n}\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: string) {\r\n    return instance.get(`profile/${userId}`)\r\n  },\r\n  getStatus(userId: string){\r\n    return instance.get(`profile/status/${userId}`)\r\n  },\r\n  updateStatus(status: string){\r\n    return instance.put(`profile/status`, {status: status})\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance.get<ResponseType<MeResponseDataType>>(`auth/me`)\r\n  },\r\n  login(email: string, password: string, remember: boolean = false) {\r\n    return instance.post<ResponseType<MeResponseDataType>>(`auth/login`, {email, password, remember})\r\n    .then(res => res.data)\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType<MeResponseDataType>>(`auth/login`)\r\n    .then(res => res.data)\r\n  }\r\n}\r\n\r\n","\r\nimport React from 'react';\r\n\r\n\r\nconst News = () => {\r\n  return (\r\n    <div>\r\n      News\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default News;\r\n","import React from 'react';\r\n\r\n\r\n\r\nconst Music = () => {\r\n  return (\r\n    <div>\r\n      Music\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Music;\r\n","import React from 'react';\r\n\r\n\r\n\r\nconst Settings = () => {\r\n  return (\r\n    <div>\r\n      Settings\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;\r\n","import { UsersType } from './../components/Users/Users';\r\nimport { authAPI, ResultCodesEnum } from \"../api/api\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { StateType } from './redux-store';\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nexport type AuthPropsType = {\r\n  users: UsersType[]\r\n  email: string\r\n  login: string\r\n  isAuth: boolean\r\n}\r\n\r\nexport type AuthActionTypes = ReturnType<typeof setAuthUserData>\r\n\r\nlet initialState: AuthPropsType = {\r\n  users: [],\r\n  email: \"\",\r\n  login: \"\",\r\n  isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action: AuthActionTypes): AuthPropsType => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId: string, email: string, login: string, isAuth: boolean) => ({type: SET_USER_DATA, data: {userId, email, login, isAuth}} as const)\r\n\r\n//thunk-logic\r\ntype ThunkType = ThunkAction<void, StateType, unknown, AuthActionTypes>\r\n\r\nexport const getAuthUserData = (): ThunkType => (dispatch: Dispatch<AuthActionTypes>) => {\r\n  authAPI.me().then(response => {\r\n    console.log(response.data);\r\n    if (response.data.resultCode === 0) {\r\n      let {id, login, email} = response.data.data;\r\n      dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n  });\r\n}\r\n\r\nexport const login = (email: string, password: string, remember: boolean): ThunkType => (dispatch) => {\r\n  authAPI.login(email, password, remember).then(response => {\r\n    if (response.resultCode === ResultCodesEnum.Success) {\r\n      dispatch(getAuthUserData());\r\n    }\r\n  });\r\n}\r\n\r\nexport const logout = (): ThunkType => (dispatch) => {\r\n  authAPI.logout().then(response => {\r\n    if (response.resultCode === ResultCodesEnum.Success) {\r\n      dispatch(setAuthUserData(\"\", \"\", \"\", false));\r\n    }\r\n  });\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport s from './Navbar.module.css'\r\n\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type NavbarType = {\r\n  id?: string\r\n  url: string\r\n  name: string\r\n}\r\n\r\nconst Navbar: React.FC<NavbarType> = (props) => {\r\n\r\n\r\n  return (\r\n      <div>\r\n        <div className={s.list}>\r\n          <div className={s.list_item}>\r\n            <div>\r\n            <NavLink to={props.url}>{props.name}</NavLink>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './Friends.module.css'\r\n\r\nexport type FriendsType = {\r\n  id?: string\r\n  name: string\r\n}\r\n\r\nconst Friends: React.FC<FriendsType> = (props) => {\r\n\r\n  return (\r\n    <div className=\"sidebar__friends-item\">\r\n      <div className={s.friends_avatar}></div>\r\n      <div className={s.friends_name}>{props.name}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Friends;","import React from 'react';\r\nimport s from './Sidebar.module.css'\r\n\r\nimport Navbar, { NavbarType } from \"./Navbar/Navbar\"\r\nimport Friends, { FriendsType } from \"./Friends/Friends\"\r\n\r\n\r\nexport type SidebarType = {\r\n  navbar: Array<NavbarType>\r\n  friends: Array<FriendsType>\r\n}\r\n\r\nconst Sidebar: React.FC<SidebarType> = (props) => {\r\n\r\n  let navElements = props.navbar.map( items => <Navbar url={items.url} name={items.name} id={items.id} key={items.id}/>);\r\n\r\n  let friendsElements = props.friends.map( items => <Friends name={items.name} id={items.id} key={items.id}/>);\r\n\r\n  return (\r\n    <nav className={s.wrapper}>\r\n        {navElements}\r\n      <div className=\"sidebar__friends\">\r\n        <div className={s.friends_label}>\r\n          Friends\r\n        </div>\r\n        <div className={s.friends_items}>\r\n          {friendsElements}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { getAuthUserData, setAuthUserData } from '../../redux/auth-redux';\r\nimport { FriendsType, NavbarType, StateType } from '../../redux/redux-store';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport Sidebar from './Sidebar';\r\n\r\n\r\ntype MapStatePropsType = {\r\n  navbar: Array<NavbarType>\r\n  friends: Array<FriendsType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  getAuthUserData: () => void\r\n}\r\n\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps & OwnPropsType\r\n\r\n\r\nexport const SidebarContainer: React.FC<PropsType> = ({navbar, friends, getAuthUserData}) => {\r\n\r\n  useEffect(() => {\r\n    getAuthUserData();\r\n  }, [])\r\n\r\n\r\n\r\n    return ( <Sidebar navbar={navbar} friends={friends}/>\r\n    );\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n  navbar: Array<NavbarType>\r\n  friends: Array<FriendsType>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n  return {\r\n    navbar: state.sidebarPage.navbar,\r\n    friends: state.friendsBar.friends\r\n  }\r\n}\r\n\r\n\r\n\r\nlet withUrlDataContainerComponent = withRouter(SidebarContainer)\r\n\r\n\r\nexport default connect(mapStateToProps,{setAuthUserData, getAuthUserData}) (withUrlDataContainerComponent);","import { Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { DataType, userAPI } from './../api/api';\r\nimport { StateType } from './redux-store';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\nexport type UserType = {\r\n  id: number\r\n  photos: PhotosType\r\n  followed: boolean\r\n  name: string\r\n  status: string | null\r\n  uniqueUrlName: null | string\r\n}\r\n\r\ntype PhotosType = {\r\n  small: null | string\r\n  large: null | string\r\n}\r\n\r\nexport type UsersLocation = {\r\n  city: string\r\n  country: string\r\n}\r\n\r\nexport type UsersPageType = {\r\n  users: UserType[]\r\n  pageSize: number,\r\n  totalUsersCount: number,\r\n  currentPage: number\r\n  isFetching: boolean\r\n  followingInProgress: number[]\r\n}\r\n\r\nexport type UsersActionTypes =  ReturnType<typeof followSuccess> |\r\n                                ReturnType<typeof unfollowSuccess> |\r\n                                ReturnType<typeof setUsers> |\r\n                                ReturnType<typeof setCurrentPages> |\r\n                                ReturnType<typeof setUsersTotalCount> |\r\n                                ReturnType<typeof toggleIsFetching> |\r\n                                ReturnType<typeof toggleFollowingProgress>\r\n\r\nlet initialState: UsersPageType = {\r\n  users: [ ],\r\n  pageSize: 5,\r\n  totalUsersCount: 11,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [],\r\n};\r\n\r\n\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionTypes): UsersPageType => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: true };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: false };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case SET_USERS: {\r\n      return { ...state, users: action.users }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    case SET_CURRENT_PAGE: {\r\n      return { ...state, currentPage: action.currentPage }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return { ...state, totalUsersCount: action.count }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    case TOGGLE_IS_FETCHING: {\r\n      return { ...state, isFetching: action.isFetching }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId),\r\n      }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const followSuccess = (userId: number) => ({ type: FOLLOW, userId } as const);\r\nexport const unfollowSuccess = (userId: number) => ({ type: UNFOLLOW, userId } as const);\r\nexport const setUsers = (users: UserType[]) => ({ type: SET_USERS, users } as const);\r\nexport const setCurrentPages = (currentPage: number) => ({ type: SET_CURRENT_PAGE, currentPage } as const);\r\nexport const setUsersTotalCount = (totalUsersCount: number) => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  count: totalUsersCount,\r\n} as const);\r\nexport const toggleIsFetching = (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching } as const);\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n} as const);\r\n\r\ntype ThunkType = ThunkAction<void, StateType, unknown, UsersActionTypes>\r\n\r\n// thunk logic\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n  return (dispatch: Dispatch<UsersActionTypes>) => {\r\n    dispatch(toggleIsFetching(true));\r\n    userAPI.getUsers(currentPage, pageSize).then((data: DataType) => {\r\n      dispatch(setUsers(data.items));\r\n      dispatch(setUsersTotalCount(data.totalCount));\r\n      dispatch(toggleIsFetching(false));\r\n    });\r\n  };\r\n};\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n  return (dispatch: Dispatch<UsersActionTypes>) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    userAPI.follow(userId)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(followSuccess(userId));\r\n      }\r\n      dispatch(toggleFollowingProgress(false, userId));\r\n    });\r\n  }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n  return (dispatch: Dispatch<UsersActionTypes>) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    userAPI.unfollow(userId)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(unfollowSuccess(userId));\r\n      }\r\n      dispatch(toggleFollowingProgress(false, userId));\r\n    });\r\n  }\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/users.dce446e0.png\";","import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport userPhoto from '../../assets/img/users.png'\r\nimport { UserType } from '../../redux/usersReducer';\r\nimport s from './Users.module.css'\r\n\r\nexport type UsersType = {\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  currentPage: number\r\n  onPageChanged: (pageNumber: number) => void\r\n  users: UserType[]\r\n  follow: (userId: number) => void\r\n  unfollow: (userId: number) => void\r\n  followingInProgress: number[]\r\n}\r\n\r\nexport const Users: React.FC<UsersType> = (props) => {\r\n  // let pagesCount = Math.ceil (props.totalUsersCount / props.pageSize); //допилить вывод пользователей через кнопку ещё (сейчас ограничение страниц 25)\r\n  let pages = [];\r\n  for (let i=1; i <= 25; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  return ( <div>\r\n\r\n    <div className={s.pagination}>\r\n      {pages.map( p => {\r\n        return <div className={s.pagination_wrapper} onClick={() => {props.onPageChanged(p)}}>\r\n                    <span  className={props.currentPage === p ? s.pagination_item_selected : \"\"}\r\n                      >{p}</span>\r\n              </div>\r\n      })}\r\n\r\n      </div>\r\n        {props.users.map( (u) => <div key={u.id}>\r\n        <div className={s.wrapper}>\r\n          <div className={s.logo}>\r\n          <NavLink to={'/profile/' + u.id}> <img src={u.photos.small != null ? u.photos.small : userPhoto} alt=\"avatar\" /></NavLink>\r\n            <div className=\"users__btn\">\r\n              {u.followed\r\n                ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                          onClick={() => {props.unfollow(u.id)}}>\r\n                    Unfollow</button>\r\n\r\n                  : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                            onClick={() => {props.follow(u.id)}}>\r\n                    Follow</button>\r\n              }\r\n            </div>\r\n          </div>\r\n          <div className={s.descr_wrapper_outer}>\r\n            <div className={s.descr_wrapper_inner}>\r\n              <div className={s.descr}>\r\n                <div className=\"users__descr-name\">{u.name}</div>\r\n                <div className={s.descr_status}>{u.status}</div>\r\n              </div>\r\n              <div className={s.location}>\r\n                <div className={s.location_country}>{\"u.location.country\"},</div>\r\n                <div className={s.location_city}>{\"u.location.city\"}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>) }\r\n  </div>\r\n  )\r\n}\r\n","\r\nimport React from 'react'\r\nimport s from './Spinner.module.css'\r\n\r\nfunction Spinner() {\r\n  return (\r\n    <div>\r\n      <div className={s.lds_roller}><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport { connect} from \"react-redux\";\r\nimport { follow, setCurrentPages, unfollow, toggleFollowingProgress, getUsers,  UserType } from '../../redux/usersReducer';\r\nimport {Users} from './Users';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport { StateType } from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter } from 'react-router-dom';\r\n\r\ntype UsersContainerType = {\r\n  getUsers: (currentPage: number, pageSize: number) => void\r\n  users: UserType[]\r\n  currentPage: number\r\n  pageSize: number\r\n  isFetching: boolean\r\n  totalUsersCount: number\r\n  followingInProgress: number[]\r\n  follow: (userId: number) => void\r\n  unfollow: (userId: number) => void\r\n}\r\n\r\ntype PropsType = RouteComponentProps & UsersContainerType\r\n\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n  componentDidMount() {\r\n    this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n  onPageChanged = (pageNumber: number) => {\r\n    this.props.getUsers(pageNumber, this.props.pageSize);\r\n  }\r\n\r\n  render() {\r\n\r\n      return (<>\r\n          {this.props.isFetching ? <Spinner/> : null}\r\n          <Users  {...this.props} onPageChanged={this.onPageChanged}\r\n          />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\ntype MapStatePropsType = {\r\n  users: UserType[]\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  currentPage: number\r\n  isFetching: boolean\r\n  followingInProgress: number[]\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => {\r\n  return {\r\n    users: state.usersPage.users,\r\n    pageSize: state.usersPage.pageSize,\r\n    totalUsersCount: state.usersPage.totalUsersCount,\r\n    currentPage: state.usersPage.currentPage,\r\n    isFetching: state.usersPage.isFetching,\r\n    followingInProgress: state.usersPage.followingInProgress\r\n  }\r\n}\r\n\r\n\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     follow: (userId) => {\r\n//       dispatch(followAC(userId))\r\n//     },\r\n//     unfollow: (userId) => {\r\n//       dispatch(unfollowAC(userId))\r\n//     },\r\n//     setUsers: (users) => {\r\n//       dispatch(setUsersAC(users))\r\n//     },\r\n//     setCurrentPage: (pageNumber) => {\r\n//       dispatch(setCurrentPagesAC(pageNumber))\r\n//     },\r\n//     setTotalUsersCount: (totalCount) => {\r\n//       dispatch(setUsersTotalCountAC(totalCount))\r\n//     },\r\n//     toggleIsFetching: (isFetching) => {\r\n//       dispatch(toggleIsFetchingAC(isFetching))\r\n//     },\r\n//   }\r\n// }\r\n\r\n//ниже в коннекте сокращенный код, переданный вторым аргументом ввиде объекта (если значение == свойству follow: follow, то можно писать в одно слово)\r\n\r\n\r\nlet WithUrlDataContainerComponent = withRouter(UsersContainer);\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPages,\r\n    toggleFollowingProgress,\r\n    getUsers\r\n  }) (WithUrlDataContainerComponent);","import { v1 } from 'uuid';\r\nimport { Dispatch } from 'redux';\r\nimport { profileAPI, userAPI } from '../api/api';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { StateType } from './redux-store';\r\n\r\nexport type ProfilePageType = {\r\n  posts: Array<PostsType>;\r\n  newPostText: string;\r\n  profile: ProfileType\r\n  status: string\r\n};\r\n\r\nexport type PostsType = {\r\n  id: string;\r\n  message: string;\r\n};\r\n\r\nexport type ProfileType = {\r\n  userId: string;\r\n  lookingForAJob: boolean;\r\n  lookingForAJobDescription: string;\r\n  fullName: string\r\n  aboutMe: string;\r\n  contacts: ContactsType;\r\n  photos: PhotosType;\r\n};\r\n\r\ntype ContactsType = {\r\n  github: string;\r\n  vk: string;\r\n  facebook: string;\r\n  instagram: string;\r\n  twitter: string;\r\n  website: string;\r\n  youtube: string;\r\n  mainLink: string;\r\n};\r\n\r\ntype PhotosType = {\r\n  small: string;\r\n  large: string;\r\n};\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst ON_POST_CHANGE = 'ON_POST_CHANGE';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\n\r\nlet initialState: ProfilePageType = {\r\n  posts: [\r\n    { id: v1(), message: 'Hi, how are you?' },\r\n    { id: v1(), message: \"It's my first post\" },\r\n  ],\r\n  newPostText: '',\r\n  profile: {\r\n    userId: \"0\",\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: \"\",\r\n    fullName: \"\",\r\n    aboutMe: \"\",\r\n    contacts: {\r\n      github: \"\",\r\n      vk: \"\",\r\n      facebook: \"\",\r\n      instagram: \"\",\r\n      twitter: \"\",\r\n      website: \"\",\r\n      youtube: \"\",\r\n      mainLink: \"\",\r\n    },\r\n    photos: {\r\n      small: \"\",\r\n      large: \"\",\r\n    }\r\n  },\r\n  status: \"----------\",\r\n};\r\n\r\nexport type ProfileActionTypes =\r\n  | ReturnType<typeof addPostActionCreator>\r\n  | ReturnType<typeof onPostChangeTextActionCreator>\r\n  | ReturnType<typeof setUserProfile>\r\n  | ReturnType<typeof setStatus>\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionTypes): ProfilePageType => {\r\n  let copyState;\r\n\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      copyState = {\r\n        ...state,\r\n        posts: [...state.posts, { id: v1(), message: action.newText }],\r\n      };\r\n      return copyState;\r\n    case ON_POST_CHANGE:\r\n      copyState = {\r\n        ...state,\r\n        newPostText: action.newText,\r\n      };\r\n      return copyState;\r\n    case SET_USER_PROFILE: {\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    }\r\n    case SET_STATUS: {\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const addPostActionCreator = (text: string) => ({ type: ADD_POST, newText: text } as const);\r\nexport const onPostChangeTextActionCreator = (text: string) => ({ type: ON_POST_CHANGE, newText: text } as const);\r\nexport const setUserProfile = (profile: ProfileType) => ({ type: SET_USER_PROFILE, profile } as const);\r\nexport const setStatus = (status: string) => ({ type: SET_STATUS, status } as const);\r\nexport const updateStatus = (status: string) => ({ type: SET_STATUS, status } as const);\r\n\r\ntype ThunkType = ThunkAction<void, StateType, unknown, ProfileActionTypes>;\r\n\r\nexport const getUserProfile = (userId: string): ThunkType => {\r\n  return (dispatch: Dispatch<ProfileActionTypes>) => {\r\n    userAPI.getProfile(userId).then((response) => {\r\n      dispatch(setUserProfile(response.data));\r\n\r\n    });\r\n  };\r\n};\r\n\r\nexport const getUserStatus = (status: string): ThunkType => {\r\n  return (dispatch: Dispatch<ProfileActionTypes>) => {\r\n    profileAPI.getStatus(status).then((response) => {\r\n      console.log(response.data);\r\n      dispatch(setStatus(response.data));\r\n    });\r\n  };\r\n};\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => {\r\n  return (dispatch: Dispatch<ProfileActionTypes>) => {\r\n    profileAPI.updateStatus(status).then((response) => {\r\n      if(response.data.resultCode === 0){\r\n        dispatch(setStatus(status));\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport default profileReducer;\r\n","import React, { ChangeEvent, ChangeEventHandler, Component } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\ntype ProfileStatusType ={\r\n  status: string\r\n  updateUserStatus: (userId: string) => void\r\n}\r\n\r\nexport default class ProfileStatus extends Component<ProfileStatusType> {\r\n  state = {\r\n    editMode: false,\r\n    status: this.props.status\r\n  }\r\n\r\n  activateEditMode = () => {\r\n    this.setState({\r\n      editMode: true\r\n    })\r\n  }\r\n\r\n  deactivateEditMode = () => {\r\n    this.setState({\r\n      editMode: false\r\n    })\r\n    this.props.updateUserStatus(this.state.status)\r\n  }\r\n\r\n  onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      status: e.currentTarget.value\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps: ProfileStatusType, prevState: ProfileStatusType){\r\n    if(prevProps.status !== this.props.status){\r\n      this.setState({\r\n        status: this.props.status\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={s.status_wrapper}>\r\n          {!this.state.editMode &&\r\n            <div className={s.status_span}>\r\n              <span onDoubleClick={this.activateEditMode}>{this.props.status ? this.props.status : \"-----------------\"}</span>\r\n            </div>\r\n          }\r\n          {this.state.editMode &&\r\n            <div className={s.status_input}>\r\n              <input onChange={this.onStatusChange} autoFocus onBlur={this.deactivateEditMode} value={this.state.status}></input>\r\n            </div>\r\n          }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { ProfileType } from '../../../redux/profileReducer';\r\nimport Spinner from '../../Spinner/Spinner';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n  profile: ProfileType\r\n  status: string\r\n  updateUserStatus: (userId: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateUserStatus}) => {\r\n\r\n\r\n\r\n  if (profile.userId === \"0\") {\r\n    return <Spinner/>\r\n  } else\r\n\r\n  return (\r\n    <div className={s.user}>\r\n    <img className={s.user_img} src={ profile.photos.large} alt=\"avatar\" />\r\n    <div className=\"content__user-wrapper\">\r\n      <div className={s.user_name}>{profile.fullName}</div>\r\n      <ProfileStatus status={status} updateUserStatus={updateUserStatus}/>\r\n      <div className=\"content__user-description\">\r\n        <ul className={s.user_description_list}>\r\n          <li>info</li>\r\n          <li>About me: <span>{profile.aboutMe}</span></li>\r\n          <li>Contacts:\r\n            <li>Facebook: <span>{profile.contacts.facebook}</span></li>\r\n            <li>Website: {profile.contacts.website}</li>\r\n            <li>VK: {profile.contacts.vk}</li>\r\n            <li>Twitter: {profile.contacts.twitter}</li>\r\n            <li>Instagram: {profile.contacts.instagram}</li>\r\n            <li>Youtube: {profile.contacts.youtube}</li>\r\n            <li>Looking for a Job: {profile.lookingForAJob ? 'Yes' : 'No'}</li>\r\n            <li>Github: {profile.contacts.github}</li>\r\n            <li>Job description: {profile.lookingForAJobDescription}</li>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nexport type PostType = {\r\n  message: string\r\n}\r\n\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <div className={s.avatar}>\r\n        <img className={s.avatar_img} src=\"https://yt3.ggpht.com/ytc/AAUvwniWcUyONM4Tu8W_39ae7hyeTOrxPjdmjeKjyb6U=s900-c-k-c0x00ffffff-no-rj\" alt=\"avatar\" />\r\n      </div>\r\n      <div className={s.message_wrapper}>\r\n        <div className=\"messages_message\">{props.message}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { ChangeEvent } from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './MyPosts.module.css';\r\nimport { MyPostsPropsType } from './MyPostsContainer';\r\n\r\n\r\n\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n  const postsElements = props.profilePage.posts.map((posts) => <Post message={posts.message} key={posts.id} />);\r\n\r\n  let text = props.profilePage.newPostText\r\n\r\n  const onAddPost = () => {\r\n    props.addPost(text)\r\n  };\r\n\r\n\r\n  const onPostChangeText = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    let text = e.currentTarget.value\r\n    props.onPostChangeText(text)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={s.posts}>\r\n      <div className={s.post}>My posts</div>\r\n      <div className={s.new_post}>\r\n        <textarea\r\n          className={s.new_post_textarea}\r\n          onChange={onPostChangeText}\r\n          value={text}\r\n          placeholder=\"your news...\"\r\n        />\r\n      </div>\r\n      <div className={s.posts_btn}>\r\n        <button className={s.btn_button}\r\n                onClick={onAddPost}\r\n                >\r\n          Send\r\n        </button>\r\n      </div>\r\n      {postsElements}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport MyPosts from './MyPosts';\r\nimport { addPostActionCreator, onPostChangeTextActionCreator, ProfilePageType } from '../../../redux/profileReducer';\r\nimport { StateType } from '../../../redux/redux-store';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n  profilePage: ProfilePageType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n  addPost: (body: string) => void\r\n  onPostChangeText: (body: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchToProps\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => {\r\n  return {\r\n    profilePage: state.profilePage\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n  return {\r\n    addPost: (text: string) => {\r\n      dispatch(addPostActionCreator(text));\r\n      dispatch(onPostChangeTextActionCreator(''));\r\n    },\r\n    onPostChangeText: (text: string) => {\r\n      dispatch(onPostChangeTextActionCreator(text));\r\n    }\r\n  }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import React from 'react';\r\n\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport s from './Profile.module.css';\r\nimport { MyPostsContainer } from '../Profile/MyPosts/MyPostsContainer';\r\nimport { ProfilePageType, ProfileType } from '../../redux/profileReducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\ntype ProfilePropsType = {\r\n  profile: ProfileType\r\n  status: string\r\n  updateUserStatus: (userId: string) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({profile, status, updateUserStatus}) => {\r\n\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <header className=\"content__header\">\r\n        <img\r\n          className={s.content_img}\r\n          src=\"https://static9.depositphotos.com/1656823/1156/i/950/depositphotos_11563134-stock-photo-blue-water.jpg\"\r\n          alt=\"background\"\r\n        />\r\n      </header>\r\n\r\n      <div className={s.content}>\r\n        <ProfileInfo profile={profile} status={status} updateUserStatus={updateUserStatus}/>\r\n\r\n        <MyPostsContainer/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { Component } from 'react';\r\nimport { ComponentType } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect} from 'react-router-dom';\r\nimport { StateType } from '../../redux/redux-store';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: StateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>)  {\r\n\r\n  const RedirectComponent = (props: MapStateToPropsType) =>  {\r\n      let {isAuth, ...restProps} = props\r\n      if (!isAuth) return <Redirect to={\"/login\"}/>\r\n      return <Component {...restProps as T}/>\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {getUserProfile, ProfileType, getUserStatus, updateUserStatus} from '../../redux/profileReducer'\r\n\r\nimport Profile from \"./Profile\";\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { StateType } from '../../redux/redux-store';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n  profile: ProfileType\r\n  status: string\r\n}\r\n\r\ntype ParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  getUserProfile: (userId: string) => void\r\n  getUserStatus: (userId: string) => void\r\n  updateUserStatus: (userId: string) => void\r\n}\r\n\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<ParamsType> & OwnPropsType\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n      componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n          userId = \"17731\";\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n      }\r\n\r\n      render() {\r\n            return (\r\n              <Profile profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatus}/>\r\n          )\r\n      }\r\n    }\r\n\r\n\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps,{getUserProfile, getUserStatus, updateUserStatus}),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n","export default __webpack_public_path__ + \"static/media/soc_logo.5829bfdb.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css'\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport logo from \"../../assets/img/soc_logo.png\";\r\nimport { AuthPropsType } from '../../redux/auth-redux';\r\nimport { Login } from '../Login/Login';\r\n\r\n\r\ntype HeaderPropsType = {\r\n  isAuth: boolean\r\n  onLogout: () => void\r\n  state: boolean\r\n}\r\n\r\n\r\nconst Header: React.FC<HeaderPropsType> = ({isAuth, onLogout, state}) => {\r\n  // console.log(\"rednder isAuth: \",isAuth);\r\n  \r\n  return (\r\n    <header className={s.header}>\r\n      <img className={s.header_img} src={logo} alt=\"logo\" />\r\n      {!isAuth\r\n      ? <div className=\"header__login\">\r\n        {isAuth ? 'Ok' : <NavLink to={'/login'}>Login</NavLink>}\r\n      </div>\r\n      :\r\n      <button onClick={()=>{onLogout()}} >Logout</button>}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { getAuthUserData, logout, setAuthUserData } from '../../redux/auth-redux';\r\nimport { StateType } from '../../redux/redux-store';\r\nimport Header from './Header';\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  getAuthUserData: () => void\r\n  logout: () => void\r\n}\r\n\r\n\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps & OwnPropsType\r\n\r\n\r\n\r\nconst HeaderContainer: React.FC<PropsType> = ({isAuth, getAuthUserData, logout}) => {\r\n\r\n  const [state, setState] = useState(false)\r\n  console.log(state);\r\n  console.log(\"render isAuth\", isAuth);\r\n\r\n  useEffect(() => {\r\n    if(!state){\r\n      getAuthUserData();\r\n    }\r\n  }, [])\r\n\r\n  const onLogout = () => {\r\n    setState(!state)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(isAuth){\r\n      logout();\r\n    }\r\n  }, [state])\r\n\r\n\r\n\r\n    return ( <Header isAuth={isAuth} onLogout={onLogout} state={state}/>\r\n    );\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n  login: string\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login\r\n});\r\n\r\nlet WithUrlDataContainerComponent = withRouter(HeaderContainer)\r\n\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData, getAuthUserData, logout}) (WithUrlDataContainerComponent);","import React from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport { LoginType } from '../../api/api';\r\nimport s from './Login.module.css'\r\n\r\n\r\n\r\ntype LoginFormPropsType = {\r\n  onSubmit: (data: LoginType)=> void\r\n}\r\n\r\n\r\nexport function LoginForm(props: LoginFormPropsType) {\r\n  const { register, handleSubmit} = useForm();\r\n\r\n\r\n  const onSubmit = (data: LoginType) => props.onSubmit(data);\r\n\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <input {...register(\"email\")} />\r\n      <div>&nbsp;</div>\r\n      <input {...register(\"password\")} />\r\n      <div>&nbsp;</div>\r\n      <input {...register(\"rememberMe\")} type={'checkbox'}/>\r\n      <span>remember me</span>\r\n      <div>&nbsp;</div>\r\n      <input type=\"submit\"/>\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useFormik } from 'formik';\r\n// import React from 'react'\r\n// import s from './Login.module.css'\r\n// import * as Yup from 'yup';\r\n\r\n\r\n\r\n// type LoginFormPropsType = {\r\n//   login: (email: string, password: string, remember: boolean)=> void\r\n// }\r\n\r\n// export const LoginForm: React.FC<LoginFormPropsType> = ({login}) => {\r\n//   const formik = useFormik({\r\n//     initialValues: {\r\n//       email: '',\r\n//       password: '',\r\n//       rememberMe: \"false\",\r\n//     },\r\n//     validationSchema: Yup.object({\r\n//       email: Yup.string()\r\n//         .max(20, 'Must be 15 characters or less')\r\n//         .required('Required'),\r\n//       password: Yup.string()\r\n//         .max(20, 'Must be 20 characters or less')\r\n//         .required('Required'),\r\n//     }),\r\n//     onSubmit: values => {\r\n//       login(values.email, values.password, !values.rememberMe)\r\n//       console.log(\"log\",values.rememberMe);\r\n//     },\r\n//   });\r\n\r\n//   return (\r\n//     <form className={s.form} >\r\n//       <label htmlFor=\"email\"></label>\r\n//       <input\r\n//         name=\"email\"\r\n//         type=\"text\"\r\n//         onChange={formik.handleChange}\r\n//         onBlur={formik.handleBlur}\r\n//         value={formik.values.email}\r\n//         className={formik.touched.email && formik.errors.email ? s.error_input : s.input}\r\n//       />\r\n//       {formik.touched.email && formik.errors.email ? (\r\n//         <div className={s.error}>{formik.errors.email}</div>\r\n//       ) : <div>&nbsp;</div>}\r\n\r\n//       <label htmlFor=\"password\"></label>\r\n//       <input\r\n//         name=\"password\"\r\n//         type=\"password\"\r\n//         onChange={formik.handleChange}\r\n//         onBlur={formik.handleBlur}\r\n//         value={formik.values.password}\r\n//         className={formik.touched.password && formik.errors.password ? s.error_input : s.input}\r\n//       />\r\n//       {formik.touched.password && formik.errors.password ? (\r\n//         <div className={s.error}>{formik.errors.password}</div>\r\n//       ) : <div>&nbsp;</div>}\r\n//       <div className={s.remember}>\r\n//         <input\r\n//           name=\"remember\"\r\n//           type=\"checkbox\"\r\n//           onChange={formik.handleChange}\r\n//           onBlur={formik.handleBlur}\r\n//           //@ts-ignore\r\n//           value={formik.values.rememberMe}\r\n//         />\r\n//           <label htmlFor=\"remember\">remember me</label>\r\n//       </div>\r\n//       <button className={s.btn} type=\"submit\" onClick={()=> {}}>Submit</button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport s from './Login.module.css'\r\nimport { LoginForm } from './LoginForm';\r\nimport { login} from '../../redux/auth-redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { StateType } from '../../redux/redux-store';\r\nimport { LoginType } from '../../api/api';\r\n\r\n\r\n\r\nexport const Login = () => {\r\n\r\n  const [state, setState] = useState({\r\n                                    email: \"\",\r\n                                    password: \"\",\r\n                                    rememberMe: false,\r\n                                  })\r\n\r\n  const dispatch = useDispatch()\r\n  const isAuth = useSelector<StateType, boolean>(state => state.auth.isAuth)\r\n\r\n  const onSubmit = (data: LoginType) => {\r\n    setState(data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(login(state.email, state.password, state.rememberMe))\r\n  }, [state])\r\n\r\n\r\n\r\n  if (isAuth) {return <Redirect to={\"/profile\"}/>}\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <div className={s.login}>\r\n        <h1>Login</h1>\r\n        <LoginForm onSubmit={onSubmit}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import { v1 } from 'uuid';\r\nimport { FriendMessageType } from '../components/Dialogs/Message/FriendMessage';\r\nimport { MessageType } from '../components/Dialogs/Message/Message';\r\n\r\n\r\nexport type DialogsPageType = {\r\n  dialogs: Array<DialogsType>\r\n  messages: Array<MessageType>\r\n  friendMessages: Array<FriendMessageType>\r\n  newMessageBody: string\r\n}\r\n\r\nexport type DialogsType = {\r\n  id: string\r\n  name: string\r\n}\r\n\r\n\r\nexport type DialogsActionTypes = ReturnType<typeof sendMessageCreator> | ReturnType<typeof updateMessageCreator>\r\n\r\n\r\nconst NEW_MESSAGE = \"NEW_MESSAGE\";\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\nlet initialState: DialogsPageType = {\r\n  dialogs: [\r\n    {id: v1(), name: 'Dima'},\r\n    {id: v1(), name: 'Andrey'},\r\n    {id: v1(), name: 'Sveta'},\r\n    {id: v1(), name: 'Sasha'},\r\n    {id: v1(), name: 'Victor'},\r\n    {id: v1(), name: 'Valera'}\r\n  ],\r\n  messages: [\r\n    {id: v1(), message: 'Hi'},\r\n  ],\r\n  friendMessages: [\r\n    {id: v1(), message: 'How are you?'}\r\n  ],\r\n  newMessageBody: ''\r\n}\r\n\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionTypes): DialogsPageType => {\r\n\r\n  switch (action.type) {\r\n      case NEW_MESSAGE:\r\n        return {\r\n                ...state,\r\n                newMessageBody: action.newText\r\n              }\r\n      case SEND_MESSAGE:\r\n        return {\r\n                ...state,\r\n                messages: [...state.messages, {id: v1(), message: action.newText}]\r\n              }\r\n      default:\r\n        return {...state};\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const updateMessageCreator  = (text: string) => ({type: NEW_MESSAGE, newText: text} as const)\r\nexport const sendMessageCreator  = (text: string) => ({type: SEND_MESSAGE, newText: text} as const)\r\n\r\n\r\nexport default dialogsReducer;\r\n","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\nexport type MessageType = {\r\n  id: string\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n\r\nconsole.log(props.message);\r\n\r\n\r\n  return (\r\n          <div className={s.users_wrapper}>\r\n            <div className={s.dialogs_users_message}>{props.message}</div>\r\n            <div className={s.dialogs_users}>\r\n              <div className=\"dialogs__users-avatar\">\r\n                <img src=\"https://yt3.ggpht.com/ytc/AAUvwniWcUyONM4Tu8W_39ae7hyeTOrxPjdmjeKjyb6U=s900-c-k-c0x00ffffff-no-rj\" alt=\"avatar\" />\r\n              </div>\r\n              <div className=\"dialogs__users-name\">Me</div>\r\n              </div>\r\n          </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './DialogItem.module.css'\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemType = {\r\n  id: string\r\n  name: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n  let path = `/messages/${props.id}`;\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.item}>\r\n        <div className={s.item_mark}></div>\r\n        <div className={s.item_name}>\r\n          <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './FriendMessage.module.css'\r\n\r\n\r\n\r\nexport type FriendMessageType = {\r\n  id: string\r\n  message: string\r\n}\r\n\r\n\r\n\r\nconst FriendMessage: React.FC<FriendMessageType> = (props) => {\r\n\r\n\r\n\r\n  return (\r\n          <div className={s.wrapper_friend}>\r\n            <div className={s.friend}>\r\n              <div className=\"dialogs__users-avatar-friend\">\r\n                <img className={s.friend_img} src=\"https://yt3.ggpht.com/ytc/AAUvwniWcUyONM4Tu8W_39ae7hyeTOrxPjdmjeKjyb6U=s900-c-k-c0x00ffffff-no-rj\" alt=\"avatar\" />\r\n              </div>\r\n              <div className=\"dialogs__users-name-friend\">Dima</div>\r\n            </div>\r\n            <div className={s.message_friend}>{props.message}</div>\r\n          </div>\r\n  )\r\n}\r\n\r\n\r\nexport default FriendMessage;\r\n","import axios from 'axios';\r\nimport React, { ChangeEvent } from 'react'\r\nimport { UserType } from '../../../redux/usersReducer';\r\nimport { DialogsPropsType } from '../DialogsContainer';\r\nimport s from './NewMessage.module.css'\r\n\r\n\r\n\r\nconst NewMessage: React.FC<DialogsPropsType> = ({onSendMessageClick, onNewMessageChange, dialogsPage}) => {\r\n\r\n  let newMessageBody = dialogsPage.newMessageBody;\r\n\r\n\r\n  const onSendMessageClickC = () => {\r\n    let text = newMessageBody\r\n    onSendMessageClick(text)\r\n  };\r\n\r\n\r\n  const onNewMessageChangeC = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    let text = e.currentTarget.value\r\n    onNewMessageChange(text)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n          <div className={s.new_message_wrapper}>\r\n            <div className={s.new_message}>\r\n              <textarea className={`${s.new_message} textarea`}\r\n              value={newMessageBody}\r\n              onChange={onNewMessageChangeC}\r\n              placeholder=\"Enter your next\"\r\n              />\r\n            </div>\r\n            <div className={s.new_message_btn}>\r\n              <button onClick={onSendMessageClickC} className={`${s.new_message_btn} button`}>Send</button>\r\n            </div>\r\n          </div>\r\n  )\r\n}\r\n\r\n\r\nexport default NewMessage;\r\n","import React, { ComponentType } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { compose, Dispatch } from 'redux';\r\nimport { DialogsPageType, sendMessageCreator, updateMessageCreator } from '../../redux/dialogsReducer';\r\nimport { StateType } from '../../redux/redux-store';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport {Dialogs} from './Dialogs';\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n  dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n  onSendMessageClick: (body: string) => void\r\n  onNewMessageChange: (body: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToProps\r\n\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\n\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {\r\n    onSendMessageClick: (body: string) => {\r\n      dispatch( sendMessageCreator(body))\r\n      dispatch( updateMessageCreator(\"\") )\r\n    },\r\n    onNewMessageChange: (body: string) => {\r\n      dispatch(updateMessageCreator(body))\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)\r\n\r\n","\r\nimport React from 'react';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport FriendMessage from \"./Message/FriendMessage\";\r\nimport s from './Dialogs.module.css'\r\n\r\nimport {StateType } from '../../redux/redux-store';\r\nimport { Redirect } from 'react-router-dom';\r\nimport NewMessage from './NewMessage/NewMessage';\r\nimport { DialogsPropsType } from './DialogsContainer';\r\nimport { DialogsPageType } from '../../redux/dialogsReducer';\r\n\r\n\r\nexport type DialogsSetType = {\r\n  dialogsPage: DialogsPageType\r\n}\r\n\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsSetType> = ({...restProps}) => {\r\n\r\n  let dialogsPage = restProps.dialogsPage\r\n\r\n  let dialogsElements = dialogsPage.dialogs.map( d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\r\n\r\n  let messagesElements = dialogsPage.messages.map( m => <Message message={m.message} id={m.id} key={m.id}/>);\r\n\r\n  let friendMessagesElements = dialogsPage.friendMessages.map( f => <FriendMessage message={f.message} id={f.id} key={f.id}/>);\r\n\r\n\r\n\r\n  return (\r\n    <div className={s.dialogs_wrapper}>\r\n      <div className={s.items}>\r\n        <div className={s.label}>Dialogs</div>\r\n        {dialogsElements}\r\n      </div>\r\n      <div>\r\n        {friendMessagesElements}\r\n        {messagesElements}\r\n        <NewMessage {...restProps as DialogsPropsType}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Settings from './components/Settings/Settings';\r\nimport SidebarContainer from './components/Sidebar/SidebarContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport {Login} from './components/Login/Login';\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app-wrapper\">\r\n      <div className=\"app-wrapper-inner\">\r\n        <HeaderContainer />\r\n        <SidebarContainer />\r\n        <div className=\"content-wrapper\">\r\n          <Route\r\n            path=\"/profile/:userId?\"\r\n            render={() => <ProfileContainer/>}\r\n          />\r\n          <Route path=\"/messages\" render={ () => <DialogsContainer />}/>\r\n          <Route path=\"/users\" render={ () => <UsersContainer />}/>\r\n          <Route path=\"/news\" render={() => <News />} />\r\n          <Route path=\"/music\" render={() => <Music />} />\r\n          <Route path=\"/settings\" render={() => <Settings />} />\r\n          <Route path=\"/login\" render={ () => <Login/>}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ActionTypes, SidebarPageType} from './redux-store';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\n// const ADD_POST = \"ADD_POST\";\r\n// const ON_POST_CHANGE = \"ON_POST_CHANGE\";\r\n\r\nlet initialState: SidebarPageType = {\r\n  navbar: [\r\n    {id: v1(), name: 'Profile', url: '/profile'},\r\n    {id: v1(), name: 'Messages', url: '/messages'},\r\n    {id: v1(), name: 'Users', url: '/users'},\r\n    {id: v1(), name: 'News', url: '/news'},\r\n    {id: v1(), name: 'Music', url: '/music'},\r\n    {id: v1(), name: 'Settings', url: '/settings'},\r\n  ]\r\n}\r\n\r\nconst sidebarReducer = (state = initialState, action: ActionTypes) => {\r\n  // switch (action.type) {\r\n    // case ADD_POST:\r\n    //   const newPost: PostsType = {\r\n    //     id: v1(),\r\n    //     message: action.newText\r\n    //   }\r\n    //   state.posts.push(newPost)\r\n    //   return state;\r\n    // case ON_POST_CHANGE:\r\n    //   state.newPostText = action.newText\r\n    //   return state;\r\n    // default:\r\n      return state;\r\n  }\r\n\r\nexport default sidebarReducer;","import { v1 } from 'uuid';\r\nimport { ActionTypes, FriendsBarType } from './redux-store';\r\n\r\n\r\n// const NEW_MESSAGE = \"NEW_MESSAGE\";\r\n// const SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\nlet initialState: FriendsBarType = {\r\n      friends: [\r\n        {id: v1(), name: 'Andrew'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Sveta'},\r\n      ]\r\n}\r\n\r\n\r\nconst friendsReducer = (state = initialState, action: ActionTypes) => {\r\n    // switch (action.type) {\r\n    //   case NEW_MESSAGE:\r\n    //     state.newMessageBody = action.newText\r\n    //     let text: MessageType = {id: v1(), message: 'Hi'}\r\n    //     state.messages.push(text)\r\n    //     return state;\r\n    //   case SEND_MESSAGE:\r\n    //     state.newMessageBody = action.newText\r\n    //     return state;\r\n    //   default:\r\n        return state;\r\n    }\r\n\r\n\r\n// export const sendMessageCreator  = (text: string) => ({type: NEW_MESSAGE, newText: text})\r\n// export const updateMessageCreator  = (text: string) => ({type: SEND_MESSAGE, newText: text})\r\n\r\n\r\nexport default friendsReducer;\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport dialogsReducer, { DialogsActionTypes } from './dialogsReducer';\r\nimport profileReducer, { addPostActionCreator, onPostChangeTextActionCreator, ProfileActionTypes } from './profileReducer';\r\nimport sidebarReducer from './sidebarReducer';\r\nimport friendsReducer from './friendsReducer';\r\nimport {UsersActionTypes, usersReducer} from './usersReducer';\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport authReducer, { AuthActionTypes } from \"./auth-redux\";\r\n\r\nexport type StoreType = {\r\n  state: StateType\r\n  dispatch: (action: ActionTypes) => void\r\n}\r\n\r\n\r\n\r\nexport type ActionTypes =  ProfileActionTypes | DialogsActionTypes | UsersActionTypes | AuthActionTypes\r\n\r\n\r\n\r\nexport type NavbarType = {\r\n  id: string\r\n  name: string\r\n  url: string\r\n}\r\n\r\n\r\nexport type FriendsType = {\r\n  id: string\r\n  name: string\r\n}\r\n\r\nexport type FriendsBarType = {\r\n  friends: Array<FriendsType>\r\n}\r\n\r\nexport type SidebarPageType = {\r\n  navbar: Array<NavbarType>\r\n}\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebarPage: sidebarReducer,\r\n  friendsBar: friendsReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport {store }  from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\n\r\n//УДАЛИЛИ ФУНКЦИЮ render, т.к. в к контейнерной компоненте мы используем функциюю connect, в ней есть встроенный render, отрисовка происходит локально!!!!!!!!!!!!!\r\n\r\n  ReactDOM.render(\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n          <App />\r\n      </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n\r\n// //отрисовывем приложение прокидывая стейт\r\n// renderTree();\r\n\r\n\r\n// //уведомляем редакс об изменении\r\n// store.subscribe(() => {\r\n//   renderTree()\r\n// });\r\n\r\n"],"sourceRoot":""}