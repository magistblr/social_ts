{"version":3,"sources":["components/Users/Users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Dialogs/NewMessage/NewMessage.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/Message/FriendMessage.module.css","components/Sidebar/Sidebar.module.css","components/Profile/Profile.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Dialogs.module.css","components/Sidebar/Navbar/Navbar.module.css","components/Sidebar/Friends/Friends.module.css","components/Header/Header.module.css","components/Spinner/Spinner.module.css","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","api/api.ts","redux/usersReducer.ts","assets/img/users.png","components/Users/Users.tsx","components/Spinner/Spinner.tsx","components/Users/UsersContainer.tsx","components/Sidebar/Navbar/Navbar.tsx","components/Sidebar/Friends/Friends.tsx","components/Sidebar/Sidebar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/profileReducer.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","assets/img/soc_logo.png","components/Header/Header.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/FriendMessage.tsx","redux/dialogsReducer.ts","components/Dialogs/NewMessage/NewMessage.tsx","components/Dialogs/NewMessage/NewMessageContainer.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Login/Login.tsx","App.tsx","redux/sidebarReducer.ts","redux/friendsReducer.ts","redux/auth-redux.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","News","Music","Settings","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","type","toggleFollowingProgress","Users","props","pages","i","push","className","map","p","onClick","onPageChanged","u","s","wrapper","logo","to","id","src","photos","small","userPhoto","alt","followed","disabled","some","unfollow","follow","descr_wrapper_outer","descr_wrapper_inner","descr","name","descr_status","status","location","location_country","location_city","Spinner","lds_roller","UsersContainer","pageNumber","getUsers","state","usersPage","this","React","Component","connect","dispatch","resultCode","followSuccess","unfollowSuccess","setCurrentPages","setUsers","items","totalCount","count","Navbar","list","list_item","url","Friends","friends_avatar","friends_name","Sidebar","navElements","navbar","friendsElements","friends","friends_label","friends_items","ProfileInfo","user","user_img","user_name","user_description_list","Post","avatar","avatar_img","message_wrapper","message","MyPosts","postsElements","profilePage","posts","text","newPostText","new_post","new_post_textarea","onChange","e","currentTarget","value","onPostChangeText","placeholder","posts_btn","btn_button","addPost","ADD_POST","ON_POST_CHANGE","v1","profile","onPostChangeTextActionCreator","newText","profileReducer","action","MyPostsContainer","addPostActionCreator","Profile","content_img","content","Header","header","header_img","Message","users_wrapper","dialogs_users_message","dialogs_users","DialogItem","path","item","item_mark","item_name","FriendMessage","wrapper_friend","friend","friend_img","message_friend","NEW_MESSAGE","SEND_MESSAGE","dialogs","messages","friendMessages","newMessageBody","updateMessageCreator","dialogsReducer","NewMessage","dialogsPage","new_message_wrapper","new_message","onNewMessageChange","new_message_btn","onSendMessageClick","NewMessageContainer","body","DialogsContainer","dialogsElements","d","messagesElements","m","friendMessagesElements","f","dialogs_wrapper","label","Login","App","friendsBar","sidebarPage","render","sidebarReducer","friendsReducer","SET_USER_DATA","email","login","isAuth","authReducer","rootReducer","combineReducers","filter","auth","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","getState","document","getElementById"],"mappings":"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","file":"static/js/main.94c086ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3nngw\",\"logo\":\"Users_logo__QHSjf\",\"descr_wrapper_outer\":\"Users_descr_wrapper_outer__2Whhg\",\"descr_wrapper_inner\":\"Users_descr_wrapper_inner__2XT0f\",\"descr\":\"Users_descr__1Rj5K\",\"descr_status\":\"Users_descr_status__24AxJ\",\"location\":\"Users_location__1jpYC\",\"location_city\":\"Users_location_city__2Do-m\",\"pagination\":\"Users_pagination__2fKqc\",\"pagination_wrapper\":\"Users_pagination_wrapper__2-vfX\",\"pagination_item_selected\":\"Users_pagination_item_selected__3mJJz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__9Y59T\",\"post\":\"MyPosts_post__2wS-p\",\"new_post\":\"MyPosts_new_post__C3IhM\",\"new_post_textarea\":\"MyPosts_new_post_textarea__qfhTp\",\"posts_btn\":\"MyPosts_posts_btn__29dr_\",\"btn_button\":\"MyPosts_btn_button__2QB03\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"new_message_wrapper\":\"NewMessage_new_message_wrapper__1CmWe\",\"new_message\":\"NewMessage_new_message__1eWPh\",\"new_message_btn\":\"NewMessage_new_message_btn__2osm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"ProfileInfo_user__2TDrZ\",\"user_img\":\"ProfileInfo_user_img__2xBB2\",\"user_name\":\"ProfileInfo_user_name__xNmFt\",\"user_description_list\":\"ProfileInfo_user_description_list__3BH0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Post_wrapper__3KSP_\",\"avatar\":\"Post_avatar__2f4zC\",\"avatar_img\":\"Post_avatar_img__2IHO-\",\"message_wrapper\":\"Post_message_wrapper__96s_b\",\"messages_message\":\"Post_messages_message__2R41_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_friend\":\"FriendMessage_wrapper_friend__1O19g\",\"friend\":\"FriendMessage_friend__3gZAn\",\"friend_img\":\"FriendMessage_friend_img__3ASaE\",\"message_friend\":\"FriendMessage_message_friend__1oaFm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Sidebar_wrapper__13cMU\",\"friends_label\":\"Sidebar_friends_label__1yany\",\"friends_items\":\"Sidebar_friends_items__1aNcY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__3ysYR\",\"content_img\":\"Profile_content_img__84EmG\",\"content\":\"Profile_content__1CSvy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_wrapper\":\"Message_users_wrapper__Nvix9\",\"dialogs_users\":\"Message_dialogs_users__kukkg\",\"dialogs_users_message\":\"Message_dialogs_users_message__2zvZD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DialogItem_item__n7hXj\",\"item_mark\":\"DialogItem_item_mark__2g0FK\",\"item_name\":\"DialogItem_item_name__3Umts\",\"item-name\":\"DialogItem_item-name__2MUBs\",\"active\":\"DialogItem_active__2Ny-Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs_wrapper\":\"Dialogs_dialogs_wrapper__1FMMd\",\"items\":\"Dialogs_items__FbC7O\",\"label\":\"Dialogs_label__QPpqT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Navbar_list__zuUDk\",\"list_item\":\"Navbar_list_item__2S3w8\",\"active\":\"Navbar_active__36ZXq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_avatar\":\"Friends_friends_avatar__CAp_D\",\"friends_name\":\"Friends_friends_name__37GVk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2ylUg\",\"header_img\":\"Header_header_img__1dAnZ\",\"header_login\":\"Header_header_login__MUUDF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_roller\":\"Spinner_lds_roller__3twnJ\"};","\r\nimport React from 'react';\r\n\r\n\r\nconst News = () => {\r\n  return (\r\n    <div>\r\n      News\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default News;\r\n","import React from 'react';\r\n\r\n\r\n\r\nconst Music = () => {\r\n  return (\r\n    <div>\r\n      Music\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Music;\r\n","import React from 'react';\r\n\r\n\r\n\r\nconst Settings = () => {\r\n  return (\r\n    <div>\r\n      Settings\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',    //автоматом приклеивается к адресу в запросе(важно писать URL с большой буквы)\r\n  headers: {\r\n    \"API-KEY\": \"bb8b9c32-3a16-4cd6-8ee3-c45b813c19f5\"\r\n  }\r\n})\r\n\r\nexport const userAPI = {\r\n  getUsers(currentPage = 1, pageSize = 10) {\r\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`)       //запрос\r\n      .then(response => {\r\n        return response.data;\r\n      });\r\n      \r\n  },\r\n\r\n  follow(userId: number) {\r\n    return instance.post(`follow/${userId}`)       //запрос\r\n  },\r\n\r\n  unfollow(userId: number) {\r\n    return instance.delete(`follow/${userId}`)       //запрос\r\n  },\r\n  getProfile(userId: number) {\r\n    return instance.get(`profile/${userId}`)\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance.get(`auth/me`)\r\n  }\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { userAPI } from './../api/api';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\nexport type UserType = {\r\n  id: number\r\n  photos: PhotosType\r\n  followed: boolean\r\n  name: string\r\n  status: string\r\n}\r\n\r\ntype PhotosType = {\r\n  small: null | string\r\n  large: null | string\r\n}\r\n\r\nexport type UsersLocation = {\r\n  city: string\r\n  country: string\r\n}\r\n\r\nexport type UsersPageType = {\r\n  users: UserType[]\r\n  pageSize: number,\r\n  totalUsersCount: number,\r\n  currentPage: number\r\n  isFetching: boolean\r\n  followingInProgress: number[]\r\n}\r\n\r\n\r\nlet initialState: UsersPageType = {\r\n  users: [],\r\n  pageSize: 5,\r\n  totalUsersCount: 11,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [],\r\n};\r\n\r\nexport type UsersActionTypes =  ReturnType<typeof followSuccess> |\r\n                                ReturnType<typeof unfollowSuccess> |\r\n                                ReturnType<typeof setUsers> |\r\n                                ReturnType<typeof setCurrentPages> |\r\n                                ReturnType<typeof setUsersTotalCount> |\r\n                                ReturnType<typeof toggleIsFetching> |\r\n                                ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionTypes): UsersPageType => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: true };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: false };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case SET_USERS: {\r\n      return { ...state, users: action.users }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    case SET_CURRENT_PAGE: {\r\n      return { ...state, currentPage: action.currentPage }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return { ...state, totalUsersCount: action.count }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    case TOGGLE_IS_FETCHING: {\r\n      return { ...state, isFetching: action.isFetching }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId),\r\n      }; //берем старый стейт и новый(склеиваем)\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const followSuccess = (userId: number) => ({ type: FOLLOW, userId } as const);\r\nexport const unfollowSuccess = (userId: number) => ({ type: UNFOLLOW, userId } as const);\r\nexport const setUsers = (users: UserType[]) => ({ type: SET_USERS, users } as const);\r\nexport const setCurrentPages = (currentPage: number) => ({ type: SET_CURRENT_PAGE, currentPage } as const);\r\nexport const setUsersTotalCount = (totalUsersCount: any) => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  count: totalUsersCount,\r\n} as const);\r\nexport const toggleIsFetching = (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching } as const);\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n} as const);\r\n\r\n\r\n// thunk logic\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n\r\n    userAPI.getUsers(currentPage, pageSize).then((data) => {\r\n      dispatch(toggleIsFetching(false));\r\n      dispatch(setUsers(data.items));\r\n      dispatch(setUsersTotalCount(data.totalCount));\r\n    });\r\n  };\r\n};\r\n\r\nexport const follow = (userId: number) => {\r\n  return (dispatch: Dispatch) => {\r\n    toggleFollowingProgress(true, userId);\r\n\r\n    userAPI.follow(userId)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(followSuccess(userId));\r\n      }\r\n      dispatch(toggleFollowingProgress(false, userId));\r\n    });\r\n  }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n  return (dispatch: Dispatch) => {\r\n    toggleFollowingProgress(true, userId);\r\n\r\n    userAPI.unfollow(userId)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(unfollowSuccess(userId));\r\n      }\r\n      dispatch(toggleFollowingProgress(false, userId));\r\n    });\r\n  }\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/users.dce446e0.png\";","import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport userPhoto from '../../assets/img/users.png'\r\nimport { StateType } from '../../redux/redux-store';\r\nimport { UserType } from '../../redux/usersReducer';\r\nimport s from './Users.module.css'\r\n\r\nexport type UsersType = {\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  currentPage: number\r\n  onPageChanged: (pageNumber: number) => void\r\n  users: UserType[]\r\n  follow: (userId: number) => void\r\n  unfollow: (userId: number) => void\r\n  followingInProgress: number[]\r\n}\r\n\r\nexport const Users: React.FC<UsersType> = (props) => {\r\n  // let pagesCount = Math.ceil (props.totalUsersCount / props.pageSize); допилить вывод пользователей через кнопку ещё (сейчас ограничение страниц 25)\r\n  let pages = [];\r\n  for (let i=1; i <= 25; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n\r\n\r\n  return ( <div>\r\n\r\n    <div className=\"users__pagination\">\r\n      {pages.map( p => {\r\n        return <div className=\"users__pagination-wrapper\" onClick={() => {props.onPageChanged(p)}}>\r\n                    <span  className={props.currentPage === p ? \"users__pagination-item_selected\" : \"\"}\r\n                      >{p}</span>\r\n              </div>\r\n      })}\r\n\r\n      </div>\r\n        {props.users.map( (u) => <div key={u.id}>\r\n        <div className={s.wrapper}>\r\n          <div className={s.logo}>\r\n          <NavLink to={'/profile/' + u.id}> <img src={u.photos.small != null ? u.photos.small : userPhoto} alt=\"avatar\" /></NavLink>\r\n            <div className=\"users__btn\">\r\n              {u.followed\r\n                ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                          onClick={() => {props.unfollow(u.id)}}>\r\n                    Unfollow</button>\r\n\r\n                  : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                            onClick={() => {props.follow(u.id)}}>\r\n                    Follow</button>\r\n              }\r\n            </div>\r\n          </div>\r\n          <div className={s.descr_wrapper_outer}>\r\n            <div className={s.descr_wrapper_inner}>\r\n              <div className={s.descr}>\r\n                <div className=\"users__descr-name\">{u.name}</div>\r\n                <div className={s.descr_status}>{u.status}</div>\r\n              </div>\r\n              <div className={s.location}>\r\n                <div className={s.location_country}>{\"u.location.country\"},</div>\r\n                <div className={s.location_city}>{\"u.location.city\"}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>)}\r\n  </div>\r\n  )\r\n}\r\n","\r\nimport React from 'react'\r\nimport s from './Spinner.module.css'\r\n\r\nfunction Spinner() {\r\n  return (\r\n    <div>\r\n      <div className={s.lds_roller}><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport { connect} from \"react-redux\";\r\nimport { follow, setCurrentPages, unfollow, toggleFollowingProgress, getUsers, UsersPageType } from '../../redux/usersReducer';\r\nimport {Users} from './Users';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport { StateType } from '../../redux/redux-store';\r\n\r\n\r\ntype UsersContainerType = {\r\n  getUsers: (currentPage: number, pageSize: number) => void\r\n  state: StateType\r\n  follow: (userId: number) => void\r\n  unfollow: (userId: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersContainerType> {\r\n\r\n  componentDidMount() {\r\n    this.props.getUsers(this.props.state.usersPage.currentPage, this.props.state.usersPage.pageSize);\r\n    }\r\n\r\n  onPageChanged = (pageNumber: number) => {\r\n    this.props.getUsers(pageNumber, this.props.state.usersPage.pageSize);\r\n  }\r\n\r\n  render() {\r\n\r\n      return (<>\r\n          {this.props.state.usersPage.isFetching ? <Spinner/> : null}\r\n          <Users  totalUsersCount={this.props.state.usersPage.totalUsersCount}\r\n                  pageSize={this.props.state.usersPage.pageSize}\r\n                  currentPage={this.props.state.usersPage.currentPage}\r\n                  onPageChanged={this.onPageChanged}\r\n                  users={this.props.state.usersPage.users}\r\n                  follow={this.props.follow}\r\n                  unfollow={this.props.unfollow}\r\n                  followingInProgress={this.props.state.usersPage.followingInProgress}\r\n          />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\ntype MapStatePropsType = {\r\n  usersPage: UsersPageType\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n  return {\r\n    users: state.usersPage.users,\r\n    pageSize: state.usersPage.pageSize,\r\n    totalUsersCount: state.usersPage.totalUsersCount,\r\n    currentPage: state.usersPage.currentPage,\r\n    isFetching: state.usersPage.isFetching,\r\n    followingInProgress: state.usersPage.followingInProgress\r\n  }\r\n}\r\n\r\n\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     follow: (userId) => {\r\n//       dispatch(followAC(userId))\r\n//     },\r\n//     unfollow: (userId) => {\r\n//       dispatch(unfollowAC(userId))\r\n//     },\r\n//     setUsers: (users) => {\r\n//       dispatch(setUsersAC(users))\r\n//     },\r\n//     setCurrentPage: (pageNumber) => {\r\n//       dispatch(setCurrentPagesAC(pageNumber))\r\n//     },\r\n//     setTotalUsersCount: (totalCount) => {\r\n//       dispatch(setUsersTotalCountAC(totalCount))\r\n//     },\r\n//     toggleIsFetching: (isFetching) => {\r\n//       dispatch(toggleIsFetchingAC(isFetching))\r\n//     },\r\n//   }\r\n// }\r\n\r\n//ниже в коннекте сокращенный код, переданный вторым аргументом ввиде объекта (если значение == свойству follow: follow, то можно писать в одно слово)\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPages,\r\n    toggleFollowingProgress,\r\n    getUsers\r\n  }) (UsersContainer);","import React from 'react';\r\nimport s from './Navbar.module.css'\r\n\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type NavbarType = {\r\n  id?: string\r\n  url: string\r\n  name: string\r\n}\r\n\r\nconst Navbar: React.FC<NavbarType> = (props) => {\r\n\r\n\r\n  return (\r\n      <div>\r\n        <div className={s.list}>\r\n          <div className={s.list_item}>\r\n            <div>\r\n            <NavLink to={props.url}>{props.name}</NavLink>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './Friends.module.css'\r\n\r\nexport type FriendsType = {\r\n  id?: string\r\n  name: string\r\n}\r\n\r\nconst Friends: React.FC<FriendsType> = (props) => {\r\n\r\n  return (\r\n    <div className=\"sidebar__friends-item\">\r\n      <div className={s.friends_avatar}></div>\r\n      <div className={s.friends_name}>{props.name}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Friends;","import React from 'react';\r\nimport s from './Sidebar.module.css'\r\n\r\nimport Navbar, { NavbarType } from \"./Navbar/Navbar\"\r\nimport Friends, { FriendsType } from \"./Friends/Friends\"\r\n\r\n\r\nexport type SidebarType = {\r\n  navbar: Array<NavbarType>\r\n  friends: Array<FriendsType>\r\n}\r\n\r\nconst Sidebar: React.FC<SidebarType> = (props) => {\r\n\r\n  let navElements = props.navbar.map( items => <Navbar url={items.url} name={items.name} id={items.id} key={items.id}/>);\r\n\r\n  let friendsElements = props.friends.map( items => <Friends name={items.name} id={items.id} key={items.id}/>);\r\n\r\n  return (\r\n    <nav className={s.wrapper}>\r\n        {navElements}\r\n      <div className=\"sidebar__friends\">\r\n        <div className={s.friends_label}>\r\n          Friends\r\n        </div>\r\n        <div className={s.friends_items}>\r\n          {friendsElements}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\n// import Spinner from '../../Spinner/Spinner';\r\nimport s from './ProfileInfo.module.css'\r\n\r\nexport type ProfileInfoType = {\r\n  profile: any\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n  // if (!props.profile) {\r\n  //   return <Spinner/>\r\n  // }\r\n  return (\r\n    <div className={s.user}>\r\n    {/* <img className={`${s.user} img`} src={props.profile.photos.large} alt=\"avatar\" /> */}\r\n    <img className={s.user_img} src=\"https://yt3.ggpht.com/ytc/AAUvwniWcUyONM4Tu8W_39ae7hyeTOrxPjdmjeKjyb6U=s900-c-k-c0x00ffffff-no-rj\" alt=\"avatar\" />\r\n    <div className=\"content__user-wrapper\">\r\n      <div className={s.user_name}>\"Dima\"</div>\r\n      <div className=\"content__user-description\">\r\n        <ul className={s.user_description_list}>\r\n          <li>info</li>\r\n          {/* <li>About me: <span>{props.profile.aboutMe}</span></li>\r\n          <li>Contacts: \r\n            <li>Facebook: <span>{props.profile.contacts.facebook}</span></li>\r\n            <li>Website: {props.profile.contacts.website}</li>\r\n            <li>VK: {props.profile.contacts.vk}</li>\r\n            <li>Twitter: {props.profile.contacts.twitter}</li>\r\n            <li>Instagram: {props.profile.contacts.instagram}</li>\r\n            <li>Youtube: {props.profile.contacts.youtube}</li>\r\n            <li>Looking for a Job: {props.profile.lookingForAJob ? 'Yes' : 'No'}</li>\r\n            <li>Github: {props.profile.contacts.github}</li>\r\n            <li>Job description: {props.profile.contacts.lookingForAJobDescription}</li>\r\n          </li> */}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nexport type PostType = {\r\n  message: string\r\n}\r\n\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <div className={s.avatar}>\r\n        <img className={s.avatar_img} src=\"https://yt3.ggpht.com/ytc/AAUvwniWcUyONM4Tu8W_39ae7hyeTOrxPjdmjeKjyb6U=s900-c-k-c0x00ffffff-no-rj\" alt=\"avatar\" />\r\n      </div>\r\n      <div className={s.message_wrapper}>\r\n        <div className=\"messages_message\">{props.message}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { ChangeEvent } from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './MyPosts.module.css';\r\nimport { PostsType } from '../../../redux/redux-store';\r\nimport { MyPostsPropsType } from './MyPostsContainer';\r\n\r\n\r\n\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n  const postsElements = props.profilePage.posts.map((posts) => <Post message={posts.message} key={posts.id} />);\r\n\r\n  let text = props.profilePage.newPostText\r\n\r\n  const onAddPost = () => {\r\n    props.addPost(text)\r\n  };\r\n\r\n\r\n  const onPostChangeText = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    let text = e.currentTarget.value\r\n    props.onPostChangeText(text)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={s.posts}>\r\n      <div className={s.post}>My posts</div>\r\n      <div className={s.new_post}>\r\n        <textarea\r\n          className={s.new_post_textarea}\r\n          onChange={onPostChangeText}\r\n          value={text}\r\n          placeholder=\"your news...\"\r\n        />\r\n      </div>\r\n      <div className={s.posts_btn}>\r\n        <button className={s.btn_button}\r\n                onClick={onAddPost}\r\n                >\r\n          Send\r\n        </button>\r\n      </div>\r\n      {postsElements}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPosts;\r\n","import { PostsType, ProfilePageType } from './redux-store';\r\nimport { v1 } from 'uuid';\r\nimport { ProfileActionTypes } from './redux-store';\r\n\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst ON_POST_CHANGE = \"ON_POST_CHANGE\";\r\n\r\nlet initialState: ProfilePageType = {\r\n  posts:  [\r\n    {id: v1(), message: 'Hi, how are you?'},\r\n    {id: v1(), message: \"It's my first post\"}\r\n  ],\r\n  newPostText: '',\r\n  profile: null\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionTypes): ProfilePageType => {\r\n    let copyState;\r\n\r\n    switch (action.type) {\r\n      case ADD_POST:\r\n        copyState = {\r\n          ...state,\r\n          posts: [...state.posts, {id: v1(),message: action.newText}]\r\n        }\r\n        return copyState;\r\n      case ON_POST_CHANGE:\r\n        copyState = {\r\n          ...state,\r\n          newPostText: action.newText\r\n        }\r\n        return copyState;\r\n      default:\r\n        return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (text: string) => ({type: ADD_POST, newText: text} as const)\r\nexport const onPostChangeTextActionCreator  = (text: string) => ({type: ON_POST_CHANGE, newText: text} as const)\r\n\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport MyPosts from './MyPosts';\r\nimport { addPostActionCreator, onPostChangeTextActionCreator } from '../../../redux/profileReducer';\r\nimport { ProfilePageType, StateType } from '../../../redux/redux-store';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n  profilePage: ProfilePageType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n  addPost: (body: string) => void\r\n  onPostChangeText: (body: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchToProps\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => {\r\n  return {\r\n    profilePage: state.profilePage\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n  return {\r\n    addPost: (text: string) => {\r\n      dispatch(addPostActionCreator(text));\r\n      dispatch(onPostChangeTextActionCreator(''));\r\n    },\r\n    onPostChangeText: (text: string) => {\r\n      dispatch(onPostChangeTextActionCreator(text));\r\n    }\r\n  }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import React from 'react';\r\n\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport s from './Profile.module.css';\r\nimport { MyPostsContainer } from '../Profile/MyPosts/MyPostsContainer';\r\nimport { StateType } from '../../redux/redux-store';\r\n\r\nexport type ProfileType = {\r\n  state: StateType;\r\n};\r\n\r\nconst Profile: React.FC<ProfileType> = (props) => {\r\n  const profile = props.state.profilePage.profile;\r\n\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <header className=\"content__header\">\r\n        <img\r\n          className={s.content_img}\r\n          src=\"https://static9.depositphotos.com/1656823/1156/i/950/depositphotos_11563134-stock-photo-blue-water.jpg\"\r\n          alt=\"background\"\r\n        />\r\n      </header>\r\n\r\n      <div className={s.content}>\r\n        <ProfileInfo profile={profile} />\r\n\r\n        <MyPostsContainer/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","export default __webpack_public_path__ + \"static/media/soc_logo.5829bfdb.png\";","import React from 'react';\r\n// import { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css'\r\n\r\nimport logo from \"../../assets/img/soc_logo.png\";\r\n\r\nexport type HeaderType = {\r\n}\r\n\r\nconst Header: React.FC<HeaderType> = (props) => {\r\n  return (\r\n    <header className={s.header}>\r\n      <img className={s.header_img} src={logo} alt=\"logo\" />\r\n      {/* <div className=\"header__login\">\r\n        {props.isAuth ? 'Ok' : <NavLink to={'/login'}>Login</NavLink>}\r\n      </div> */}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\nexport type MessageType = {\r\n  id: string\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n\r\n\r\n\r\n  return (\r\n          <div className={s.users_wrapper}>\r\n            <div className={s.dialogs_users_message}>{props.message}</div>\r\n            <div className={s.dialogs_users}>\r\n              <div className=\"dialogs__users-avatar\">\r\n                <img src=\"https://yt3.ggpht.com/ytc/AAUvwniWcUyONM4Tu8W_39ae7hyeTOrxPjdmjeKjyb6U=s900-c-k-c0x00ffffff-no-rj\" alt=\"avatar\" />\r\n              </div>\r\n              <div className=\"dialogs__users-name\">Me</div>\r\n              </div>\r\n          </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './DialogItem.module.css'\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemType = {\r\n  id: string\r\n  name: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n  let path = `/messages/${props.id}`;\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.item}>\r\n        <div className={s.item_mark}></div>\r\n        <div className={s.item_name}>\r\n          <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './FriendMessage.module.css'\r\n\r\n\r\n\r\nexport type FriendMessageType = {\r\n  id: string\r\n  message: string\r\n}\r\n\r\n\r\n\r\nconst FriendMessage: React.FC<FriendMessageType> = (props) => {\r\n\r\n\r\n\r\n  return (\r\n          <div className={s.wrapper_friend}>\r\n            <div className={s.friend}>\r\n              <div className=\"dialogs__users-avatar-friend\">\r\n                <img className={s.friend_img} src=\"https://yt3.ggpht.com/ytc/AAUvwniWcUyONM4Tu8W_39ae7hyeTOrxPjdmjeKjyb6U=s900-c-k-c0x00ffffff-no-rj\" alt=\"avatar\" />\r\n              </div>\r\n              <div className=\"dialogs__users-name-friend\">Dima</div>\r\n            </div>\r\n            <div className={s.message_friend}>{props.message}</div>\r\n          </div>\r\n  )\r\n}\r\n\r\n\r\nexport default FriendMessage;\r\n","import { v1 } from 'uuid';\r\nimport { FriendMessageType } from '../components/Dialogs/Message/FriendMessage';\r\nimport { MessageType } from '../components/Dialogs/Message/Message';\r\n\r\n\r\nexport type DialogsPageType = {\r\n  dialogs: Array<DialogsType>\r\n  messages: Array<MessageType>\r\n  friendMessages: Array<FriendMessageType>\r\n  newMessageBody: string\r\n}\r\n\r\nexport type DialogsType = {\r\n  id: string\r\n  name: string\r\n}\r\n\r\n\r\nexport type DialogsActionTypes = ReturnType<typeof sendMessageCreator> | ReturnType<typeof updateMessageCreator>\r\n\r\n\r\nconst NEW_MESSAGE = \"NEW_MESSAGE\";\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\nlet initialState: DialogsPageType = {\r\n  dialogs: [\r\n    {id: v1(), name: 'Dima'},\r\n    {id: v1(), name: 'Andrey'},\r\n    {id: v1(), name: 'Sveta'},\r\n    {id: v1(), name: 'Sasha'},\r\n    {id: v1(), name: 'Victor'},\r\n    {id: v1(), name: 'Valera'}\r\n  ],\r\n  messages: [\r\n    {id: v1(), message: 'Hi'},\r\n  ],\r\n  friendMessages: [\r\n    {id: v1(), message: 'How are you?'}\r\n  ],\r\n  newMessageBody: ''\r\n}\r\n\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionTypes): DialogsPageType => {\r\n\r\n  switch (action.type) {\r\n      case NEW_MESSAGE:\r\n        return {\r\n                ...state,\r\n                newMessageBody: action.newText\r\n              }\r\n      case SEND_MESSAGE:\r\n        return {\r\n                ...state,\r\n                messages: [...state.messages, {id: v1(), message: action.newText}]\r\n              }\r\n      default:\r\n        return {...state};\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const updateMessageCreator  = (text: string) => ({type: NEW_MESSAGE, newText: text} as const)\r\nexport const sendMessageCreator  = (text: string) => ({type: SEND_MESSAGE, newText: text} as const)\r\n\r\n\r\nexport default dialogsReducer;\r\n","import React, { ChangeEvent } from 'react'\r\nimport s from './NewMessage.module.css'\r\nimport { NewMessagePropsType } from './NewMessageContainer';\r\n\r\n\r\n\r\nconst NewMessage: React.FC<NewMessagePropsType> = (props) => {\r\n\r\n  let newMessageBody = props.dialogsPage.newMessageBody;\r\n\r\n\r\n  const onSendMessageClick = () => {\r\n    let text = newMessageBody\r\n    props.onSendMessageClick(text)\r\n  };\r\n\r\n\r\n  const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    let text = e.currentTarget.value\r\n    props.onNewMessageChange(text)\r\n  }\r\n\r\n\r\n  return (\r\n          <div className={s.new_message_wrapper}>\r\n            <div className={s.new_message}>\r\n              <textarea className={`${s.new_message} textarea`}\r\n              value={newMessageBody}\r\n              onChange={onNewMessageChange}\r\n              placeholder=\"Enter your next\"\r\n              />\r\n            </div>\r\n            <div className={s.new_message_btn}>\r\n              <button onClick={onSendMessageClick} className={`${s.new_message_btn} button`}>Send</button>\r\n            </div>\r\n          </div>\r\n  )\r\n}\r\n\r\n\r\nexport default NewMessage;\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { DialogsPageType, sendMessageCreator, updateMessageCreator } from '../../../redux/dialogsReducer';\r\nimport { StateType } from '../../../redux/redux-store';\r\nimport NewMessage from './NewMessage';\r\n\r\n\r\ntype MapStatePropsType = {\r\n  dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n  onSendMessageClick: (body: string) => void\r\n  onNewMessageChange: (body: string) => void\r\n}\r\n\r\nexport type NewMessagePropsType = MapStatePropsType & MapDispatchToProps\r\n\r\n\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n  return {\r\n    onSendMessageClick: (body: string) => {\r\n      dispatch( sendMessageCreator(body))\r\n      dispatch( updateMessageCreator(\"\") )\r\n    },\r\n    onNewMessageChange: (body: string) => {\r\n      dispatch(updateMessageCreator(body))\r\n    }\r\n  }\r\n}\r\n\r\nexport const NewMessageContainer = connect(mapStateToProps, mapDispatchToProps)(NewMessage)\r\n\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { DialogsPageType } from '../../redux/dialogsReducer';\r\nimport { StateType } from '../../redux/redux-store';\r\nimport {Dialogs} from './Dialogs';\r\n\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n  dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToProps\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {}\r\n}\r\n\r\n\r\n\r\nexport const DialogsContainer = connect(mapStateToProps)(Dialogs)\r\n\r\n","\r\nimport React from 'react';\r\nimport Message, { MessageType } from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport FriendMessage, { FriendMessageType } from \"./Message/FriendMessage\";\r\nimport s from './Dialogs.module.css'\r\n\r\n// import { Redirect } from 'react-router-dom';\r\nimport {StateType } from '../../redux/redux-store';\r\nimport { NewMessageContainer } from './NewMessage/NewMessageContainer';\r\n\r\n\r\nexport type DialogsSetType = {\r\n  state: StateType\r\n}\r\n\r\n\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsSetType> = ({state}) => {\r\n\r\n\r\n\r\n  let dialogsElements = state.dialogsPage.dialogs.map( d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\r\n\r\n  let messagesElements = state.dialogsPage.messages.map( m => <Message message={m.message} id={m.id} key={m.id}/>);\r\n\r\n  let friendMessagesElements = state.dialogsPage.friendMessages.map( f => <FriendMessage message={f.message} id={f.id} key={f.id}/>);\r\n\r\n  // if (!props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n  return (\r\n    <div className={s.dialogs_wrapper}>\r\n      <div className={s.items}>\r\n        <div className={s.label}>Dialogs</div>\r\n        {dialogsElements}\r\n      </div>\r\n      <div>\r\n        {friendMessagesElements}\r\n        {messagesElements}\r\n        <NewMessageContainer/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nconst Login = () => {\r\n  return (\r\n    <div>\r\n      LOGIN\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Login","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Settings from './components/Settings/Settings';\r\n// import SidebarContainer from './components/Sidebar/SidebarContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\n// import ProfileContainer from './components/Profile/ProfileContainer';\r\n// import HeaderContainer from './components/Header/HeaderContainer';\r\nimport Sidebar from './components/Sidebar/Sidebar';\r\nimport Profile from './components/Profile/Profile';\r\nimport Header from './components/Header/Header';\r\nimport { StateType } from './redux/redux-store';\r\nimport { DialogsContainer } from './components/Dialogs/DialogsContainer';\r\nimport Login from './components/Login/Login';\r\n// import Login from './components/Login/Login';\r\n\r\ntype AppType = {\r\n  state: StateType\r\n};\r\n\r\nconst App: React.FC<AppType> = ({state}) => {\r\n\r\n  let friends = state.friendsBar.friends\r\n  let navbar = state.sidebarPage.navbar;\r\n\r\n\r\n  return (\r\n    <div className=\"app-wrapper\">\r\n      <div className=\"app-wrapper-inner\">\r\n        <Header />\r\n        <Sidebar friends={friends} navbar={navbar} />\r\n        <div className=\"content-wrapper\">\r\n          <Route\r\n            path=\"/profile/:userId?\"\r\n            render={() => <Profile state={state} />}\r\n          />\r\n          <Route path=\"/messages\" render={ () => <DialogsContainer state={state}/>}/>\r\n          <Route path=\"/users\" render={ () => <UsersContainer state={state}/>}/>\r\n          <Route path=\"/news\" render={() => <News />} />\r\n          <Route path=\"/music\" render={() => <Music />} />\r\n          <Route path=\"/settings\" render={() => <Settings />} />\r\n          <Route path=\"/login\" render={ () => <Login/>}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ActionTypes, SidebarPageType} from './redux-store';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\n// const ADD_POST = \"ADD_POST\";\r\n// const ON_POST_CHANGE = \"ON_POST_CHANGE\";\r\n\r\nlet initialState: SidebarPageType = {\r\n  navbar: [\r\n    {id: v1(), name: 'Profile', url: '/profile'},\r\n    {id: v1(), name: 'Messages', url: '/messages'},\r\n    {id: v1(), name: 'Users', url: '/users'},\r\n    {id: v1(), name: 'News', url: '/news'},\r\n    {id: v1(), name: 'Music', url: '/music'},\r\n    {id: v1(), name: 'Settings', url: '/settings'},\r\n  ]\r\n}\r\n\r\nconst sidebarReducer = (state = initialState, action: ActionTypes) => {\r\n  // switch (action.type) {\r\n    // case ADD_POST:\r\n    //   const newPost: PostsType = {\r\n    //     id: v1(),\r\n    //     message: action.newText\r\n    //   }\r\n    //   state.posts.push(newPost)\r\n    //   return state;\r\n    // case ON_POST_CHANGE:\r\n    //   state.newPostText = action.newText\r\n    //   return state;\r\n    // default:\r\n      return state;\r\n  }\r\n\r\nexport default sidebarReducer;","import { v1 } from 'uuid';\r\nimport { ActionTypes, FriendsBarType } from './redux-store';\r\n\r\n\r\n// const NEW_MESSAGE = \"NEW_MESSAGE\";\r\n// const SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\nlet initialState: FriendsBarType = {\r\n      friends: [\r\n        {id: v1(), name: 'Andrew'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Sveta'},\r\n      ]\r\n}\r\n\r\n\r\nconst friendsReducer = (state = initialState, action: ActionTypes) => {\r\n    // switch (action.type) {\r\n    //   case NEW_MESSAGE:\r\n    //     state.newMessageBody = action.newText\r\n    //     let text: MessageType = {id: v1(), message: 'Hi'}\r\n    //     state.messages.push(text)\r\n    //     return state;\r\n    //   case SEND_MESSAGE:\r\n    //     state.newMessageBody = action.newText\r\n    //     return state;\r\n    //   default:\r\n        return state;\r\n    }\r\n\r\n\r\n// export const sendMessageCreator  = (text: string) => ({type: NEW_MESSAGE, newText: text})\r\n// export const updateMessageCreator  = (text: string) => ({type: SEND_MESSAGE, newText: text})\r\n\r\n\r\nexport default friendsReducer;\r\n","import { authAPI } from \"../api/api\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nexport type AuthPropsType = {\r\n  users: any\r\n  email: any\r\n  login: any\r\n  isAuth: boolean\r\n}\r\n\r\nexport type AuthActionTypes = ReturnType<typeof setAuthUserData>\r\n\r\nlet initialState = {\r\n  users: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action: AuthActionTypes) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n        isAuth: true\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number, email: string, login: string) => ({type: SET_USER_DATA, data: {userId, email, login}} as const)\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(response => {\r\n    if (response.data.resultCode === 0) {\r\n      let {id, login, email} = response.data.data;\r\n      dispatch(setAuthUserData(id, email, login));\r\n    }\r\n  });\r\n}\r\n\r\n\r\nexport default authReducer;","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport dialogsReducer, { DialogsActionTypes } from './dialogsReducer';\r\nimport profileReducer, { addPostActionCreator, onPostChangeTextActionCreator } from './profileReducer';\r\nimport sidebarReducer from './sidebarReducer';\r\nimport friendsReducer from './friendsReducer';\r\nimport {UsersActionTypes, usersReducer} from './usersReducer';\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport authReducer, { AuthActionTypes } from \"./auth-redux\";\r\n\r\nexport type StoreType = {\r\n  state: StateType\r\n  dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nexport type ProfileActionTypes = ReturnType<typeof addPostActionCreator> | ReturnType<typeof onPostChangeTextActionCreator>\r\n\r\nexport type ActionTypes =  ProfileActionTypes | DialogsActionTypes | UsersActionTypes | AuthActionTypes\r\n\r\n\r\nexport type ProfilePageType = {\r\n  posts: Array<PostsType>\r\n  newPostText: string\r\n  profile: null\r\n}\r\n\r\nexport type PostsType = {\r\n  id: string\r\n  message: string\r\n}\r\n\r\n\r\nexport type NavbarType = {\r\n  id: string\r\n  name: string\r\n  url: string\r\n}\r\n\r\n\r\nexport type FriendsType = {\r\n  id: string\r\n  name: string\r\n}\r\n\r\nexport type FriendsBarType = {\r\n  friends: Array<FriendsType>\r\n}\r\n\r\nexport type SidebarPageType = {\r\n  navbar: Array<NavbarType>\r\n}\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebarPage: sidebarReducer,\r\n  friendsBar: friendsReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport {store }  from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\n\r\n//УДАЛИЛИ ФУНКЦИЮ render, т.к. в к контейнерной компоненте мы используем функциюю connect, в ней есть встроенный render, отрисовка происходит локально!!!!!!!!!!!!!\r\n\r\n  ReactDOM.render(\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n          <App state={store.getState()}/>\r\n      </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n\r\n// //отрисовывем приложение прокидывая стейт\r\n// renderTree();\r\n\r\n\r\n// //уведомляем редакс об изменении\r\n// store.subscribe(() => {\r\n//   renderTree()\r\n// });\r\n\r\n"],"sourceRoot":""}